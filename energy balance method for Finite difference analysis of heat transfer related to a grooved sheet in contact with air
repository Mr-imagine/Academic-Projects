energy balance method for Finite difference analysis of heat transfer related to a grooved sheet in contact with air (Explicit Method)
------------------------------------------------------------------------------------------------------------------------------------------
clc;
clear all
deltaXX=input('deltaX the distnace between the nodes(choose one of these)=0.1  0.2 0.4 0.8 1 2 4 8 10 20 mm    =');
deltaX=deltaXX*10^(-3);
deltat=input('delta t (timestem)  second  = ');
problem=input('if you want the time spent for reaching a certain temperature (adjustable in line 124)=enter 1 _ if you want to enter the time spent manually and also calculating the heat flux=enter 2   =  ');
k=15;
alpha=3.91*10^(-6);
%Number of nodes in each row
X=80/deltaXX+1;
%----------
Tinfinite=200;
h=200;
% checking the stability 
HHH(1,1)=1-((4*alpha*deltat)/(deltaX^2));
HHH(2,1)=1-((4*alpha*deltat)/(deltaX^2))-((2*alpha*h*deltat)/(k*deltaX));
HHH(3,1)=1-((4*alpha*deltat)/(deltaX^2))-((4*alpha*h*deltat*(1+sqrt(2)))/(3*k*deltaX));
HHH(4,1)=1-((4*alpha*deltat)/(deltaX^2))-((2*alpha*h*deltat*(sqrt(2)))/(k*deltaX));
HHH(5,1)=1-((4*alpha*deltat)/(deltaX^2))-((4*alpha*h*deltat*(sqrt(2)))/(3*k*deltaX));
disp(HHH);
disp('the displayed numbers above all should be positive in order for the stability to get established');
% t = initial temperature    T= the next step temperature %
for QQ=1:1:X
    QQQ=1:1:X;
    t(QQ,QQQ)=10;
end
if problem==2
ttt=input('time spent second    =  ');
step=ttt/deltat+1;
for III=1:1:step
% bottom left corner node
T(1,1)=(2*alpha*deltat/(deltaX^2))*(t(1,2)+t(2,1))+((1-(4*alpha*deltat/(deltaX^2)))*t(1,1));
%-------%
% bottom right corner node
T(1,X)=(2*alpha*deltat/(deltaX^2))*(t(1,X-1)+t(2,X))+((1-(4*alpha*deltat/(deltaX^2)))*t(1,X));
%-------%
% above right corner node
T(X,X)=(2*alpha*h*deltat/(k*deltaX))*Tinfinite+(2*alpha*deltat/(deltaX^2))*(t(X-1,X)+t(X,X-1))+((1-(4*alpha*deltat/(deltaX^2))-(2*h*alpha*deltat/(k*deltaX)))*t(X,X));
%-------%
% the upper node of oblique boundary
T(X,(X-1)/2+1)=(4*h*alpha*deltat*(1+sqrt(2))/(3*k*deltaX))*Tinfinite+(8*alpha*deltat/(3*deltaX^2))*(t(X-1,(X-1)/2+1)+t(X,(X-1)/2+2)/2)+(1-(4*alpha*deltat/(deltaX^2))-(4*alpha*h*(1+sqrt(2))*deltat/(3*k*deltaX)))*t(X,(X-1)/2+1);
% the bottom node of oblique boundary
T((X-1)/2+1,1)=(4*h*alpha*deltat*(sqrt(2))/(3*k*deltaX))*Tinfinite+(8*alpha*deltat/(3*deltaX^2))*(t((X-1)/2,1)/2+t((X-1)/2+1,2))+(1-(4*alpha*deltat/(deltaX^2))-(4*alpha*h*(sqrt(2))*deltat/(3*k*deltaX)))*t((X-1)/2+1,1);
%-------%
% the nodes on the bottom boundary
for ii=2:1:X-1
    T(1,ii)=(2*alpha*deltat/(deltaX^2))*((t(1,ii-1)+t(1,ii+1))/2+t(2,ii))+((1-(4*alpha*deltat/(deltaX^2)))*t(1,ii));
end
%-------%
% the nodes on the right boundary
for ii=2:1:X-1
    T(ii,X)=(2*alpha*deltat/(deltaX^2))*((t(ii-1,X)+t(ii+1,X))/2+t(ii,X-1))+((1-(4*alpha*deltat/(deltaX^2)))*t(ii,X));
end
%-------%
% the nodes on the left vertical boundary
for ii=2:1:(X-1)/2
    T(ii,1)=(2*alpha*deltat/(deltaX^2))*((t(ii-1,1)+t(ii+1,1))/2+t(ii,2))+((1-(4*alpha*deltat/(deltaX^2)))*t(ii,1));
end
%-------%
% the nodes on the above boundary
for ii=((X-1)/2)+2:1:X-1
    T(X,ii)=(2*alpha*deltat/(deltaX^2))*((t(X,ii+1)+t(X,ii-1))/2+t(X-1,ii))+((1-(4*alpha*deltat/(deltaX^2))-(2*alpha*h*deltat/(k*deltaX)))*t(X,ii))+(2*alpha*h*deltat/(k*deltaX))*Tinfinite;
end
%-------%
% the nodes on the oblique boundary
jj=2;
for ii=((X-1)/2)+2:1:X-1
    T(ii,jj)=(2*alpha*deltat/(deltaX^2))*(t(ii-1,jj)+t(ii,jj+1))+((1-(4*alpha*deltat/(deltaX^2))-(2*alpha*h*deltat*sqrt(2)/(k*deltaX)))*t(ii,jj))+(2*alpha*h*deltat*sqrt(2)/(k*deltaX))*Tinfinite;
    jj=jj+1;
end
%-------%
% the bottom half nodes in the area ( in a rectangular shape)
for jjj=2:1:((X-1)/2)+1
for ii=2:1:X-1
    T(jjj,ii)=(alpha*deltat/(deltaX^2))*(t(jjj,ii+1)+t(jjj,ii-1)+t(jjj-1,ii)+t(jjj+1,ii))+(1-(4*alpha*deltat/(deltaX^2)))*t(jjj,ii);
end
end
%-------%
% the above half nodes in the area ( in a trapezoid shape)
HV=1;
for jjjj=((X-1)/2)+2:1:X-1
for ii=2+HV:1:X-1
    T(jjjj,ii)=(alpha*deltat/(deltaX^2))*(t(jjjj,ii+1)+t(jjjj,ii-1)+t(jjjj-1,ii)+t(jjjj+1,ii))+(1-(4*alpha*deltat/(deltaX^2)))*t(jjjj,ii);
end
HV=HV+1;
end
%-------%
% temperature of the ambient space ( in order for the matrix to be square)
HVV=1;
for ii=((X-1)/2)+2:1:X
    for VV=1:1:HVV
    T(ii,VV)=Tinfinite;
    end
    HVV=HVV+1;
end
t=T;
end
disp(T);
% calculating the heat flux
qq(1,1)=h*deltaX/2*(Tinfinite-T(X,X));
qq(1,2)=h*deltaX*(1+sqrt(2))/2*(Tinfinite-T(X,(X-1)/2+1));
qq(1,3)=h*deltaX*(sqrt(2))/2*(Tinfinite-T((X-1)/2+1,1));
for jpi=1:1:(X-1)/2-1
    qq(1,3+jpi)=h*deltaX*(Tinfinite-T(X,(X-1)/2+1+jpi));
end
for jpi=1:1:(X-1)/2-1
    qq(1,3+(X-1)/2-1+jpi)=h*sqrt(2)*deltaX*(Tinfinite-T(((X-1)/2+1+jpi),1+jpi));
end
QQQQ=0;
for hiv=1:1:3+(X-1)/2-1+jpi
    QQQQ=QQQQ+qq(1,hiv);
end
nnnnm(1,1)=QQQQ;
NNNNNN={'heat flux per unit length  w/m= ',nnnnm(1,1)};
disp(NNNNNN);
else
    tfinal=0;
for QQ=1:1:X
    QQQ=1:1:X;
    T(QQ,QQQ)=20;
end
while T(1,X)<=50    % change the 50 to another if your desired final temperature is different 
% bottom left corner node
T(1,1)=(2*alpha*deltat/(deltaX^2))*(t(1,2)+t(2,1))+((1-(4*alpha*deltat/(deltaX^2)))*t(1,1));
%-------%
% bottom right corner node
T(1,X)=(2*alpha*deltat/(deltaX^2))*(t(1,X-1)+t(2,X))+((1-(4*alpha*deltat/(deltaX^2)))*t(1,X));
%-------%
% above right corner node
T(X,X)=(2*alpha*h*deltat/(k*deltaX))*Tinfinite+(2*alpha*deltat/(deltaX^2))*(t(X-1,X)+t(X,X-1))+((1-(4*alpha*deltat/(deltaX^2))-(2*h*alpha*deltat/(k*deltaX)))*t(X,X));
%-------%
% the upper node of oblique boundary
T(X,(X-1)/2+1)=(4*h*alpha*deltat*(1+sqrt(2))/(3*k*deltaX))*Tinfinite+(8*alpha*deltat/(3*deltaX^2))*(t(X-1,(X-1)/2+1)+t(X,(X-1)/2+2)/2)+(1-(4*alpha*deltat/(deltaX^2))-(4*alpha*h*(1+sqrt(2))*deltat/(3*k*deltaX)))*t(X,(X-1)/2+1);
% the bottom node of oblique boundary
T((X-1)/2+1,1)=(4*h*alpha*deltat*(sqrt(2))/(3*k*deltaX))*Tinfinite+(8*alpha*deltat/(3*deltaX^2))*(t((X-1)/2,1)/2+t((X-1)/2+1,2))+(1-(4*alpha*deltat/(deltaX^2))-(4*alpha*h*(sqrt(2))*deltat/(3*k*deltaX)))*t((X-1)/2+1,1);
%-------%
% the nodes on the bottom boundary
for ii=2:1:X-1
    T(1,ii)=(2*alpha*deltat/(deltaX^2))*((t(1,ii-1)+t(1,ii+1))/2+t(2,ii))+((1-(4*alpha*deltat/(deltaX^2)))*t(1,ii));
end
%-------%
% the nodes on the right boundary
for ii=2:1:X-1
    T(ii,X)=(2*alpha*deltat/(deltaX^2))*((t(ii-1,X)+t(ii+1,X))/2+t(ii,X-1))+((1-(4*alpha*deltat/(deltaX^2)))*t(ii,X));
end
%-------%
% the nodes on the left vertical boundary
for ii=2:1:(X-1)/2
    T(ii,1)=(2*alpha*deltat/(deltaX^2))*((t(ii-1,1)+t(ii+1,1))/2+t(ii,2))+((1-(4*alpha*deltat/(deltaX^2)))*t(ii,1));
end
%-------%
% the nodes on the above boundary
for ii=((X-1)/2)+2:1:X-1
    T(X,ii)=(2*alpha*deltat/(deltaX^2))*((t(X,ii+1)+t(X,ii-1))/2+t(X-1,ii))+((1-(4*alpha*deltat/(deltaX^2))-(2*alpha*h*deltat/(k*deltaX)))*t(X,ii))+(2*alpha*h*deltat/(k*deltaX))*Tinfinite;
end
%-------%
% the nodes on the oblique boundary
jj=2;
for ii=((X-1)/2)+2:1:X-1
    T(ii,jj)=(2*alpha*deltat/(deltaX^2))*(t(ii-1,jj)+t(ii,jj+1))+((1-(4*alpha*deltat/(deltaX^2))-(2*alpha*h*deltat*sqrt(2)/(k*deltaX)))*t(ii,jj))+(2*alpha*h*deltat*sqrt(2)/(k*deltaX))*Tinfinite;
    jj=jj+1;
end
%-------%
% the bottom half nodes in the area ( in a rectangular shape)
for jjj=2:1:((X-1)/2)+1
for ii=2:1:X-1
    T(jjj,ii)=(alpha*deltat/(deltaX^2))*(t(jjj,ii+1)+t(jjj,ii-1)+t(jjj-1,ii)+t(jjj+1,ii))+(1-(4*alpha*deltat/(deltaX^2)))*t(jjj,ii);
end
end
%-------%
% the above half nodes in the area ( in a trapezoid shape)
HV=1;
for jjjj=((X-1)/2)+2:1:X-1
for ii=2+HV:1:X-1
    T(jjjj,ii)=(alpha*deltat/(deltaX^2))*(t(jjjj,ii+1)+t(jjjj,ii-1)+t(jjjj-1,ii)+t(jjjj+1,ii))+(1-(4*alpha*deltat/(deltaX^2)))*t(jjjj,ii);
end
HV=HV+1;
end
%-------%
% temperature of the ambient space ( in order for the matrix to be square)
HVV=1;
for ii=((X-1)/2)+2:1:X
    for VV=1:1:HVV
    T(ii,VV)=Tinfinite;
    end
    HVV=HVV+1;
end
t=T;
tfinal=tfinal+deltat;
end
disp(T);
nn(1,1)=tfinal;
NN={'time spent  second= ',nn(1,1)};
disp(NN);
end
